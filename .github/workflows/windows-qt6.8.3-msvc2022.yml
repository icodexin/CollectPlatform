name: CMake build & deploy on Windows MSVC2022 - Qt6.8.3

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

jobs:
  build:
    permissions: write-all
    name: Build apps
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        include:
          - qt_ver: 6.8.3
            qt_arch: win64_msvc2022_64
            compiler: msvc2022
            target_arch: x64
    
    env:
      BUILD_TYPE: 'Debug'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          modules: 'qtgraphs qtmultimedia qtquick3d qtshadertools qtwebsockets'
          cache: true

      - name: Setup Vars
        id: vars
        shell: pwsh
        run: |
          if ("${{ matrix.target_arch }}"-eq 'x64') {
            $vsTargetArch = 'amd64'
          } elseif ("${{ matrix.target_arch }}" -eq 'x86') {
            $vsTargetArch = 'x86'
          } else {
            Write-Error "Unsupported architecture: ${{ matrix.target_arch }}"
            exit 1
          }
          echo "targetArch=$vsTargetArch" >> $env:GITHUB_OUTPUT
      
      - name: Build 3rdparty
        shell: pwsh
        run: |
          $env:QT6_DIR = $env:QT_ROOT_DIR
          set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1" -Arch ${{ steps.vars.outputs.targetArch }}
          & ".\scripts\build_3rd.ps1" -BuildTypes ${{ env.BUILD_TYPE }} -G "Ninja Multi-Config" -InstallDir "./out/3rdparty"
      
      - name: Build Apps
        shell: pwsh
        run: |
          $env:QT6_DIR = $env:QT_ROOT_DIR
          $env:VCPKG_ROOT = $env:VCPKG_INSTALLATION_ROOT
          & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1" -Arch ${{ steps.vars.outputs.targetArch }}
          cmake --preset windows-${{ matrix.target_arch }} -DBINARY_OUT_DIRECTORY="${{ github.workspace }}/out"
          cmake --build --preset windows-${{ matrix.target_arch }} --config "${{ env.BUILD_TYPE }}"
      
      - name: Package
        id: package
        shell: pwsh
        working-directory: ${{ github.workspace }}/out/app/
        run: |
          $distPath = (Resolve-Path ./${{ env.BUILD_TYPE }}).Path
          # 删除不需要的文件
          $excludeList = @("*.qmlc", "*.ilk", "*.exp", "*.lib", "*.pdb")
          Remove-Item -Path $distPath -Include $excludeList -Recurse -Force
          # 删除空目录
          Get-ChildItem -Directory $distPath -Recurse | Where-Object {
              ($_ | Get-ChildItem -Recurse | Measure-Object).Count -eq 0
          } | Remove-Item -Force
          # 创建压缩包
          $archiveName = "app-packages-windows-Qt${{ matrix.qt_ver }}-${{ matrix.compiler }}-${{ matrix.target_arch }}-${{ env.BUILD_TYPE }}"
          Compress-Archive -Path "$distPath/*" -DestinationPath "${archiveName}.zip"
          # 输出包名和路径供后续step使用
          echo "packageName=${archiveName}" >> "$env:GITHUB_OUTPUT"
          echo "packageDir=${distPath}" >> "$env:GITHUB_OUTPUT"
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: |
            ${{ steps.package.outputs.packageDir }}\*
